[package]
name = "wasm-rust-js"
version = "0.1.0"
authors = ["Kader Fasid <fasidmpm@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = { version = "0.2.58", features = ["serde-serialize"]  }
js-sys = "0.3"
wasm-bindgen-futures = "0.4.8"
humantime = "1"

# For Request //Also, includes futures!!
serde = { version = "1.0.80", features = ["derive"] }
serde_derive = "^1.0.59"
serde_json = "1.0.48"
serde-wasm-bindgen = "0.1.3"
log = "0.4.8"
femme = "1.3.0"


# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.2"

[dependencies.web-sys]
version = "0.3"
features = [
  'CssStyleDeclaration',
  'Document',
  'Element',
  'HtmlElement',
  'Node',
  'Window',
  'Performance',
  'PerformanceTiming',
  # For Request
  'Headers',
  'Request',
  'RequestInit',
  'RequestMode',
  'Response',
  "console",
]

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
lto = true
